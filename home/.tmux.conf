# Use a saner prefix
set -g prefix C-a
unbind C-b

# Double-tap C-a to open a tmux-based session/window picker which is much more pleasant
# then the tmux `choose-tree` UI
bind C-a run-shell -b "$HOME/.local/bin/ftwind"

# Enable (begrudingly) mouse support
set -g mouse on

# Use vi mode keys to navigate buffers
setw -g mode-keys vi

# Now that i've switched to alacritty, which does seem to support the ANSI OSC escape sequence
# used by this feature, turn this back on.
#
# This assumes there's one terminal app, with one tmux session.  If you run local tmux and then ssh
# into a server and run tmux there, this doesn't work right
# See https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
# for more.
set -g set-clipboard on

# Pass through certain escape sequences to the terminal.  This is of interest to me for the OSC 52 escape sequence that pushes text into the terminal client's clipboard.
set -g allow-passthrough on

# Renumber windows so they always have a consistent contiguous order
set -g renumber-windows on

# Make copy mode a bit more vim-like
bind Escape copy-mode
bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi y send -X copy-pipe 'xclip -in -selection clipboard'\; send -X cancel
bind -T copy-mode-vi Escape send -X cancel
unbind p
bind p paste-buffer

# Experimental fix for https://github.com/tmux-plugins/tmux-resurrect/issues/94 and/or https://github.com/tmux-plugins/tmux-resurrect/issues/315
#
# Sometimes when a resurrect a tmux session, it is broken in strange ways because somehow it is not re-created as a login shell.
# I'm not sure how that can happen, but the issues above confirm I'm not the only one with this problem.  There is a fix ostensibly
# merged into master but it's not working for me.
#
# This hack is not ideal.
set -g default-command "$SHELL -l"

# For the love of Christ, moar color!
# Note this is usually 'screen-256color' for compatibility with screen
# but tmux interprets this as a signal that it should behave like screen
# which among other things means not supporting italics.  That's a deal breaker
# for me.  setting this to the more modern tmux should fix this, but the caveat
# is that systems I ssh into need to have a 'tmux' in their termcap.  Here's hoping
# that's the case
#
# NB: On systems like RHEL/CentOS as recently at 7.5, it is NOT the case.  Workarounds
# are to start SSH with a TERM=screen-256color env var, or send the local system's
# termcap to the remote system (requires root)
#
# Do that latter thusly:
# $ infocmp | ssh root@remote-host "tic -"
#set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color" #use this instead of `tmux` specifically for mosh
                                        #so mosh will in turn use its xterm-256color term type

# truecolor if you please
# this is a bit of a hack.  alacritty reports itself as xterm-256color
# and I know that's what I use and I know that suppports true color
# but lots of terminals report this, if running on a system in a terminal
# without truecolor support this will probably lead to a bad time
#
# Note to my future self when I forget how this works:
#  The '-g' flag means to set the option globally, and 'a' means to append to
#  any existing options.  The value is a comma-separated list of overrides.
#  This one says that for a TERM of xterm-256color, assume that true color 'Tc' is
#  supported.  Since alacritty sets TERM to xterm-256color, this ensures I get true color
#  when I use alacritty.
#
#  However when I SSH into a remote tmux session, the SSH client sees the TERM that tmux reports,
#  which per the 'default-terminal' setting a few lines up in this file is 'tmux-256color'.
#  So when tmux sees a terminal called 'tmux', which it will when I have nested tmux sessions,
#  it should also be explicitly told that the terminal called 'tmux' supports true color.
#
#  I have to assume someday Arch and other distros will ship with termcap databases that reflect
#  these facts, but until that day this jiggery-pokery is necessary
#
# TROUBLESHOOTING STEPS
# If color doesn't work right, keep in mind the following:
#  * Your terminal emulator must support it.  If you're using alacritty, it does.
#  * Your version of tmux, especially the remote version if you're SSH'ing somewhere, must support
#    it.  2.6 does for sure; earlier versions maybe I don't know when it was introduced.
#  * Your version of mosh must support it.  THIS IS KEY.  As of 2019-01-30, the shipping version of mosh
#    is 1.3.2.  This version DOES NOT SUPPORT TRUECOLOR.  To make it work I have to install the latest master
#    branch.  On Arch that's spelled `yay -Sy mosh-git`.  Of course, if you're not using mosh then that doesn't matter.
#  * Try "echo $TERM" to see what your term is.  In this config, tmux-256color or xterm-256color should both work.
set-option -ga terminal-overrides ",xterm-256color:Tc"
set-option -ga terminal-overrides ",alacritty:Tc"
set-option -ga terminal-overrides ",tmux-256color:Tc"
set-option -ga terminal-overrides ",tmux:Tc"

# Just like we enable `Tc` above for terminal true color support, enable some
# other features that are probably not in the termcap files yet.

# `Smol` - Enable overline
set-option -ga terminal-overrides ",xterm-256color:Smol=\E[53m"
set-option -ga terminal-overrides ",alacritty:Smol=\E[53m"
set-option -ga terminal-overrides ",tmux-256color:Smol=\E[53m"
set-option -ga terminal-overrides ",tmux:Smol=\E[53m"

# TODO: enable this if someday alacritty supports these, or if I switch to kitty and can figure out why the
# underscore color escape is not being handled
# # `Smulx` - Enable a styled underline
# set-option -ga terminal-overrides ",xterm-256color:Smulx=\E[4::%p1%dm"
# set-option -ga terminal-overrides ",tmux-256color:Smulx=\E[4::%p1%dm"
# set-option -ga terminal-overrides ",tmux:Smulx=\E[4::%p1%dm"
#
# # `Setulc` - Enable underscore color support
# set-option -ga terminal-overrides ",xterm-256color:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"
# set-option -ga terminal-overrides ",tmux-256color:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"
# set-option -ga terminal-overrides ",tmux:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"

# Include the SSH_CLIENT and SSH_CONNECTION environment variables in those tmux updates.
# The reason is perhaps not so noble, but pragmatic: Later in this file I check for $SSH_CLIENT
# and if it's set that means this session is running on a remote host, so I use a different theme
# than that used on my local system.  That doesn't work if the tmux server is started locally and then
# later I connect over SSH
set-option -ga update-environment ",SSH_CLIENT"
set-option -ga update-environment ",SSH_CONNECTION"
set-option -ga update-environment ",SSH_AUTH_SOCK"

# shorten the delay between prefix and command for a better vim experience
set -s escape-time 1

# Start window and pane numbering at 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Bind a shortcut for reloading the config
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# New windows and new panes should always take the current directory of the current pane
bind c new-window -c "#{pane_current_path}"

# More memorable split bindings
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# More memorable movement bindings
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Same for sizing bindings
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Change how the session tree is displayed; I like it all expanded
bind s choose-tree -Z -O name

# when using the main-horizonal built-in layout
# the bottom panes should be small
set-window-option -g other-pane-height 10

# Monitor activity in other windows, taht's handy
setw -g monitor-activity on
setw -g visual-activity off # don't want any messages use the style to show activity

# tmux version of alt-tab, switch to last used window in current session
bind Tab last-window

# set up user-defined key bindings for Control-Tab and Control-Shift-Tab
# NOTE: terminals don't by default seem to do this properly.  Alacritty can be configured to do so; presumably other terms can also.

set -s user-keys[0] "\e[1;5I" # Control-Tab
set -s user-keys[1] "\e[1;6I" # Control-Shift-Tab

# using C-T and C-S-T WITHOUT the leader key first, to switch to the last window or session
bind-key -n User0 last-window
bind-key -n User1 switchc -l

# NOTE: Any key binding that you want to work properly when nesting a remote tmux session in a local tmux session
# needs a binding in the 'off' custom key binding table, to send itself.

bind-key -T off -n User0 send-keys "\e[1;5I"  # Send Control-Tab as-is to remote tmux
bind-key -T off -n User1 send-keys "\e[1;6I"  # Send Control-Shift-Tab as-is to remote tmux

# Map all of the vim-tmux-navigator keys as well
# https://github.com/christoomey/vim-tmux-navigator
bind-key -T off C-h send-keys C-h
bind-key -T off C-j send-keys C-j
bind-key -T off C-k send-keys C-k
bind-key -T off C-l send-keys C-l
bind-key -T off C-\\ send-keys C-\\

# Display the status bar at the bottom
set -g status-position bottom

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

#set -g @plugin 'seebi/tmux-colors-solarized'

## Use the solarized dark theme
#set -g @colors-solarized 'dark'
# lately I like the tmux-gruvbox theme for local tmux.
set -g @plugin 'anelson/tmux-gruvbox'

# Sync pane navigation keys with vim
# NB: This plugin is both a vim and tmux plugin.  The tmux part is very simple,
# it just adds a shell conditional to detect if the PTY contains vim and thus should
# pass the C-hjkl keys.  I want to customize that expression so it also applies to
# fzf pop-ups, because those also should be able to use the same bindings I'm already used to using
#
# Bindings based on https://github.com/christoomey/vim-tmux-navigator/blob/master/vim-tmux-navigator.tmux
#set -g @plugin 'christoomey/vim-tmux-navigator'
#
# modify this is_vim shell command to also detect fzf
send_vim_keys="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?)|fzf$'"
bind-key -n C-h if-shell "$send_vim_keys" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$send_vim_keys" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$send_vim_keys" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$send_vim_keys" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$send_vim_keys" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# Open files from within tmux by selecting their name
set -g @plugin 'tmux-plugins/tmux-open'

# Enhance tmux search by supporting regexes and hugely, predefined searches
set -g @plugin 'tmux-plugins/tmux-copycat'

# Save and automatically restore tmux sessions, WOW!
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Do not let tmux-continuum restore sessions at boot time.  It doesn't work right
# per https://github.com/tmux-plugins/tmux-continuum/issues/52.  The implementation works
# by creating a systemd user service that starts the tmux server on login, and starts a new empty
# session.  I hate that and prefer to restore sessions manually
set -g @continuum-boot 'off'
set -g @resurrect-strategy-nvim 'session' #even resurrect vim sessions OMFG!
set -g @resurrect-capture-pane-contents 'on'

# Show network speed (currently only used for remote theme)
set -g @plugin 'tmux-plugins/tmux-net-speed'

# Other plugins copied from https://github.com/samoshkin/tmux-config/
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'


# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off

# These settings are based on the theme's default settings for these values, except modified to use the washed-out
# colors that by defualt are used to display the local time.
bind -T root F12  \
   set prefix None \;\
   set key-table off \;\
   set-option status-left "#[fg=colour246,bg=colour239] INACTIVE #[fg=colour239, bg=colour237, nobold, noitalics, nounderscore]" \;\
   if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
   refresh-client -S \;\

bind -T off F12 \
   set -u prefix \;\
   set -u key-table \;\
   set-option -u status-left \;\
   refresh-client -S

# Install TPM if it's not already there
# Per https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# Buckle up, this is an even more nasty hack than TPM itself.
#
# We need to apply a different them if the SSH_CLIENT env var is set, meaning
# this is running on a remote host not locally.  But our local theme is in a plugin
# egel/tmux-gruvbox, so we need to apply the remote theme after that plugin is loaded.
# But TPM loads all plugins at the end of the conf file when the TPM script is run.
#
# We could apply the remote them settings _after_ TPM is loaded, but one of the plugins
# is `tmux-plugin-sysstat`, and the way _it_ hacks its way into working is by editing the
# `status-left` and `status-right` options at load time to expand placeholders with actual
# shell scripts.  So we can't use that plugin unless the theme is fully applied in some plugin
#
# So  here comes the hack.  If this is an SSH session, load the conf file with the remote-only settings,
# then re-load the tmux-plugin-sysstat plugin script _manually_, which will re-evaluate the status bar options and
# apply the appropriate sys stat expressions.
#
# Not my best work, I grant you
if-shell 'test -n "$SSH_CLIENT"' \
   'source-file ~/.tmux/tmux.remote.conf'

# Force tmux-plugin-sysstat and others that work like it to re-evaluate the status line configs
run '~/.tmux/plugins/tmux-plugin-sysstat/sysstat.tmux'
run '~/.tmux/plugins/tmux-net-speed/net_speed.tmux'
run '~/.tmux/plugins/tmux-prefix-highlight/prefix_highlight.tmux'
