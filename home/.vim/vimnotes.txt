* text objects:
	* a inclues whitesapce, i does not, t is "until" whatever character follows, f is "following"
	* w - word
	* s - sentence
	* p - paragraph
	* " - bounded by double quotes
	* ' - bounded by single quotes
	* ` - bounded by backtick
	* ) - in parens
	* ] - in anglebackets

* Select within a quote or other delimiter: v(text object) such as vi" to select everything within double quotes

	"fuck you asshole" this is unrelated text

* Surround text with quotes: use vim-surround.  ysiw" ("iw" is a text object and " is the char to surround with; other objects are supported)
* Change or remote quotes: cs"'/ds"

* <Leader>h clears the current search highlight without disabling search highlighting in general

* with the nerdcommenter plugin, <Leader>c[space] toggles comments on the line or selection

* With unimpaired plugin, ]e moves line down [e moves line up.
* ](spacebar) adds a blank line below, [(spacebar) adds a blank line above

* YouCompleteMe and UltiSnips provide some fussy but useful auto complete capabilities.  To move up/down the menu C-n/C-p.  Dismiss the popup with C-y.  If you've typed a snippet name, C-j will expand the snippet even if the YCM menu is visible.  Once the snippet is expanded, C-j/C-k to move up/down the placeholders in the snippet.

* Very annoying and hard to break issue with tabs in insert mode.  TAB adds a tab of course, but S-TAB doesn't work as expected.  Official VIM bindings are C-t to indent and C-d to de-indent.  This is not exactly like the TAB/S-TAB behavior I'm used to.  C-t indents the entire line, just like >> in normal mode.  C-d de-indents the entire line, which is what I expect.  I have not created a mapping from S-TAB to C-d since I'm trying to build up muscle memory that works with default vim bindings as much as possible.  We'll see if that persists.

