* text objects:
	* a inclues whitesapce, i does not, t is "until" whatever character follows, f is "following"
	* w - word
	* s - sentence
	* p - paragraph
	* " - bounded by double quotes
	* ' - bounded by single quotes
	* ` - bounded by backtick
	* ) - in parens
	* ] - in anglebackets

* Select within a quote or other delimiter: v(text object) such as vi" to select everything within double quotes

	"fuck you asshole" this is unrelated text

* Surround text with quotes: use vim-surround.  ysiw" ("iw" is a text object and " is the char to surround with; other objects are supported)
* Change or remote quotes: cs"'/ds"
* To surround something selected in visual mode, use S" (for double quotes), S' (for single quotes), etc.  Also works for markup tags.

* The `%` motion moves to the matching parens/brace/whatever.  Yawn.  But do you know what it does if you're not on a parens?  It scans forward to find the first one, and then jumps to the corresponding closing symbol.  Guess how you can use that?  `c%` to change an entire method call expression!  Obviously `d%`, `y%`, etc.  Sweet!

* When navigating or selecting in code, remember the text motion objects that start with `]` and `[`.  For example `]}` moves to the closing `}`, `])` to the closing parens, etc.  There's also `]m` which moves to the next method, and `]M` which moves to the END of the method.  Want to select an entire method regardless of the language syntax?  `[mV]M` will do the job.

* In VISUAL mode, `o` moves the cursor to the opposite end of the block so you can expand or retract the selection

* <Leader>h clears the current search highlight without disabling search highlighting in general

* with the nerdcommenter plugin, <Leader>c[space] toggles comments on the line or selection

* With unimpaired plugin, ]e moves line down [e moves line up.
* ](spacebar) adds a blank line below, [(spacebar) adds a blank line above

* Switched to deoplete for completion and neosnippet for snippets due to their better integration together and the
  Neovim language server's support for deoplete.

  Autocomplete works a bit differently.  Use C-n/C-p to navigate the list of possible completions.  For those
  completions that are snippets, choose the snippet then C-k to expand the snippet, and keep pressing C-k to cycle
  through the placeholders in the snippet.

* UPDATE: No longer use these two plugins see above for autocomplete and snippets ~~YouCompleteMe and UltiSnips provide
  some fussy but useful auto complete capabilities. To move up/down the menu C-j/C-k.  Dismiss the popup with C-y.  If
  you've typed a snippet name, TAB will expand the snippet even if the YCM menu is visible.  Once the snippet is
  expanded, C-j/C-k to move up/down the placeholders in the snippet.~~

* Very annoying and hard to break issue with tabs in insert mode.  TAB adds a tab of course, but S-TAB doesn't work as expected.  Official VIM bindings are C-t to indent and C-d to de-indent.  This is not exactly like the TAB/S-TAB behavior I'm used to.  C-t indents the entire line, just like >> in normal mode.  C-d de-indents the entire line, which is what I expect.  I have not created a mapping from S-TAB to C-d since I'm trying to build up muscle memory that works with default vim bindings as much as possible.  We'll see if that persists.

# CtrlP

Handy for fuzzy matching of file/buffer/MRU files

Ctrl-P to invoke.  Defaults to list of files in the project (there's a heuristic for what is the 'project')

With the menu up, Ctrl-f/Ctrl-b to cycle forward and backward between modes
Ctrl-j/Ctrl-k to navigate up/down the list

# Grep

* The `.vimrc` uses `ag` if it's present which is much faster
* the `grep` command searches by default the current directory
* search results go in the quickfix list.  `]q`/`[q` to navigate forward and backward
* `cw` to display the quickfix list in a window which can be navigated like any other

# Windows

* C-w n - New window in a horizontal split
* C-w w - Next window
* `botright new` makes a new horizonal split window below the current window
* C-w _ - Maximizes the current window (useless because this can't be toggled)
* {NR}z<CR> - Set the current window height to {NR} lines

# Using yank to duplicate visual selection blocks

I very often want to select some code and then copy/paste it directly below for modification.  The problem is that when I press `y` to yank, the visual selection is cleared and I'm left with the cursor at the beginning not the end of the visual selection.  That's not cool.  There's a better way:

The jumps `'<` and `'>` jump to the start or end of the last visual selection!  So just `y` to yank the selected block, then `'>` to jump to the end of that block, then `p` as usual.

# Indenting multiple lines

You can use `V` to block select lines and then `>>` to indent once and then `.` to repeat that.  But there's a better way if you know from relative line numbers how many lines you want to indent.  Just use the number of lines as a modifier ton `>>`, eg: `3>>`.

# Folding

I've configured my `.vimrc` to enable folding by default, fully expand all folds, and to fold based on syntax information in the file.   There are a few handy folding commands.

I've mapped `<Leader>z` to `za` and `<Leader>Z` to `zO`.  Yes that's a bit inconsistent; I'd like to map `<Leader>Z` to
something that would do what `za` does but for all descendant folds of the current fold, but that's the opposite of what
`zA` actually does.
`zR` opens all folds in a file, if for some reason they have closed
`zr` decreases the document-wide fold level (meaning opens folds one level down).  After a `zM` this can be used to reveal the first level of folds
`zM` closes all folds
`zm` increases the fold level document wide (meaning closes folds one level up)
`zv` opens only the folds needed to reveal the cursor
`za` toggles open/closed a fold.  I'm longing for something like `za` that operates recursively on children.  There
seems to be no such thing.  `zA` operates recursively on _parents_ not children.  `zO` will recursively open a fold and
it's childen.  How do I recursively close all child folds?
`zo` opens a fold; `za` is more useful.  But `zO` recursively opens all folds, sometimes that's handy.
`zc` closes a fold; if it's on a closed fold it closes the parent fold, so you can work your way up folds that way

# Git hacks

With fugitive some cool git workflows are easier.

* `Gstatus` opens a status window and you can use the `-` key to toggle files into staging, `<C-n>` to move to next changed file, `zj`/`zk` to move down/up between sections
* `Gcommit` opens an interactive commit window
* `Gedit` edits a git file.  Doesn't seem that useful except you can specify revisions of the current file.  Killer use for me: `Gedit master:%` edits the current file as it appears in the `master` branch.  Great way to get the old version of the file.
* `Gvsplit master:%` same as above but with a vertical split to see the two versions side by side
* From withing `Gstatus` use `cc` to start committing

# SBT

There's no good sbt integration right now.  The challenge is how do you populate the quickfix list with the output of a compile or test run?  We don't want vim invoking sbt because that is slow and the output format is not consistent.  This code https://github.com/Duhemm/sbt-errors-summary/blob/sbt-0.13/src/main/scala/sbt/errorssummary/Reporter.scala shows a plugin some guy wrote which generates alternate error message formats.  His plugin is not interesting but he found a way to hook into the compiler messages directly so no parsing is required.  That's a first step.

Need to write an sbt plugin that uses this technique to get compiler errors.  I seem to recall the testing framework in SBT also has a way to get test results out programmatically.

Then need to figure out a way to hook before and after a compile operation happens project-wide, not for each sub-project, and generate a quickfix list.

Finally, need a way to programmatically call back into vim from sbt to notify when new test or compile errors are present.  The shitty sbt-quickfix plugin uses `vim` remote mode; `nvim` actually has a socket protocol that can be used with `nvrm` but in both cases the issue is figuring out which (n)vim instance is the one that should be called in to

There might be another way on the horizon.  In SBT 1.0 there is a `server` command almost entirely undocumented.  When SBT starts up at least on my system it loads this by default and prints out a "sbt server started at..." message.  Looking at https://github.com/sbt/sbt/issues/3508 it seems eed3si9n has merged a change to populate a server discovery JSON file when this server starts, but it was merged recently and probably won't be in a released SBT version for a while.

This server accepts some simple JSON commands to send it command line options and it responds with JSON log output that includes rich warning and error info.  Not sure about tests but for compiles at least it's a good option.

This means a VIM plugin could simply look for this service discovery file in a project root, and if found connect to the socket server and remotely drive an SBT instance.  Shipping SBT is not quite there yet but it's close.  I predict this will be the way forward for vim integration with SBT.

# Rust

I have configured the neovim language client plugin to start up the Rust language server.  In order for this to work you
must have RLS installed.  Assuming you're running the version in `stable`, you need to do this to get it installed:

    $ rustup component add rls-preview rust-analysis rust-src --toolchain stable

# Motions

I already use the `s` motion often.  But remember to use `z/` and `z?` to perform a fuzzy incremental search instead of
a regular incremental search.  This is often better than `s` because you can keep typing characters until you narrow to
your target.

Another useful shortcut is `<Leader><Leader>`, which puts an easymotion sequence on every word on the screen.  Need to
experiment to see which is more convenient, but both are probably more intuitive than `s`.

# coc and rust-analyzer

The [rust-analyzer](https://github.com/fannheyward/coc-rust-analyzer) extension has a lot of useful commands:

You can use these commands by :CocCommand XYZ.

    rust-analyzer.analyzerStatus: Show rust-analyzer status
    rust-analyzer.applySourceChange: Apply source change
    rust-analyzer.selectAndApplySourceChange: Apply selected source change
    rust-analyzer.collectGarbage: Run garbage collection
    rust-analyzer.expandMacro: Expand macro recursively
    rust-analyzer.joinLines: Join lines
    rust-analyzer.matchingBrace: Find matching brace
    rust-analyzer.parentModule: Locate parent module
    rust-analyzer.reload: Restart rust-analyzer server
    rust-analyzer.run: List available runnables of current file
    rust-analyzer.runSingle: Run runnable at position
    rust-analyzer.syntaxTree: Show syntax tree
    rust-analyzer.upgrade: Download latest rust-analyzer from GitHub release

I've aliased some of these to custom commands with a prefix `RA`
